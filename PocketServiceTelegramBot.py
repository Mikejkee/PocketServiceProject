import asyncio
import os
import time
from pprint import pprint

import django
from asgiref.sync import sync_to_async
import logging
from aiogram import F, Bot, Dispatcher, types, Router
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram.filters import Text
from aiogram.filters.command import Command
from aiogram.types.web_app_info import WebAppInfo
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.storage.redis import RedisStorage

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "mainmodule.settings")
django.setup()

from PocketServiceApp.telegram_tasks import save_client_task, create_product_order_task, tg_message_task, \
    update_product_order_task, create_comment_task
from PocketServiceApp.models import Person, Client, Agent, Order

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

rating_list = ['1 ‚≠ê', '2 ‚≠ê', '3 ‚≠ê', '4 ‚≠ê', '5 ‚≠ê']

TOKEN = os.environ.get('TELEGRAM_TOKEN')
CREW_URL = 'web.pocket-service.ru'
router = Router()
storage = RedisStorage.from_url(os.environ.get('CELERY_BACKEND'))


class CommentState(StatesGroup):
    choosing_agent = State()
    choosing_order = State()
    choosing_rating = State()
    choosing_comment_text = State()
    choosing_photo = State()


@sync_to_async
def get_agents_list():
    return Agent.objects.all().__str__()


agents_list = asyncio.run(get_agents_list())

@sync_to_async
def save_client(name=None, surname=None, patronymic=None, person_fio=None,
                date_of_birth=None, phone_number=None, telegram_chat_id=None,
                telegram_id=None, telegram_username=None, telegram_name=None,
                telegram_surname=None, email=None, background_image=None, address=None,
                addition_information=None):
    task = save_client_task.delay(name, surname, patronymic, person_fio, date_of_birth, phone_number,
                                  telegram_chat_id, telegram_id, telegram_username, telegram_name,
                                  telegram_surname, email, background_image, address,
                                  addition_information)
    print('TASK CREATES - SAVE CLIENT ', task.task_id)


def tg_reminder(telegram_id, message, time=0):
    task = tg_message_task.apply_async(kwargs={'telegram_id': telegram_id, 'message': message, 'token': TOKEN},
                                       countdown=time)
    print('TASK CREATES - tg reminder ', task.task_id)
    return task.task_id


@sync_to_async
def create_product_order(phone_number, telegram_chat_id, client_id, email,
                         address, addition_information,
                         agent_id, product_type, product_addition_information,
                         order_name, order_price,
                         order_deadline, order_information):
    order_task = create_product_order_task.delay(phone_number, telegram_chat_id, client_id, email,
                                                 address, addition_information,
                                                 agent_id, product_type, product_addition_information,
                                                 order_name, order_price, order_deadline, order_information)
    print('TASK CREATES - create order ', order_task.task_id)

    client_remind_task = tg_reminder(client_id, "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ {} . \n"
                                                "–û–∂–∏–¥–∞–π—Ç–µ, –∫–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å".format(
        product_addition_information))
    print('TASK CREATES - client remind ', client_remind_task)

    agent_remind_task = tg_reminder(agent_id, "–í–∞–º –ø—Ä–∏—à–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ {}, \n "
                                              "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º. \n"
                                              "–¢–µ–ª–µ—Ñ–æ–Ω: {} , email: {}".format(product_addition_information,
                                                                               phone_number, email))
    print('TASK CREATES - agent remind ', agent_remind_task)

    agent_remind_task = tg_reminder(agent_id, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–µ–º, —á—Ç–æ –≤–∞–º –ø—Ä–∏—à–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ {}, \n "
                                              "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º –∏ –æ—Ç–º–µ—Ç—å—Ç–µ  –≤ –ª–∏—á–Ω–æ–º "
                                              "–∫–∞–±–∏–Ω–µ—Ç–µ –∏—Ñ–Ω–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞. \n"
                                              "–¢–µ–ª–µ—Ñ–æ–Ω: {} , email: {}".format(product_addition_information,
                                                                               phone_number, email),
                                    10)
    print('TASK CREATES - agent remind 3h ', agent_remind_task)

    update_order_task = update_product_order_task.delay(order_id=order_task.get(), reminder_status=1)
    print('TASK CREATES - update order', update_order_task.task_id)


@sync_to_async
def agents_list_from_orders_client(telegram_id):
    client_id = Client.objects.filter(telegram_id=telegram_id).last().id
    agents_id_list = Order.objects.filter(client_id=client_id).values_list('agent_id').distinct()
    agents_tg_list = []
    for agent_id in agents_id_list:
        agents_tg_list.append(Agent.objects.filter(id=agent_id[0]).last().__str__())
    return agents_tg_list


@sync_to_async
def comment_menu_agents_buttons(agents_list):
    buttons = []
    for agent in agents_list:
        buttons.append(
            [
                KeyboardButton(text=agent)
            ]
        )
    buttons.append([
        KeyboardButton(text='üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    ])

    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


@sync_to_async
def comment_menu_orders_buttons(agent, client_tg):
    client = Client.objects.filter(telegram_id=client_tg).last().id
    orders = Order.objects.filter(agent_id=agent, client_id=client)

    buttons = []
    for order in orders:
        buttons.append(
            [
                KeyboardButton(text=str(order))
            ]
        )
    buttons.append([
        KeyboardButton(text='üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    ])

    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


@sync_to_async
def user_check_status(telegram_id):
    user = Person.objects.filter(telegram_id=str(telegram_id))
    if user.count() > 0:
        return user.role.last().role_type
    else:
        return False


@sync_to_async
def start_menu_buttons(telegram_id):
    webApp_lc_user = WebAppInfo(url=f'https://{CREW_URL}/PocketServiceApp/profile/?TelegramId={telegram_id}')
    buttons = [
        [
            KeyboardButton(text='–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üíº', web_app=webApp_lc_user),
            KeyboardButton(text='–í–∏—Ç—Ä–∏–Ω–∞ —É—Å–ª—É–≥ üìúÔ∏è'),
        ],
        [
            KeyboardButton(text='–í—ã—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏ —É—Å–ª—É–≥–∏ üìû'),
            KeyboardButton(text='–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üí¨'),
        ]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


@sync_to_async
def create_comment(comment_data, telegram_id):
    order_id = comment_data['order'].split('[')[1][:-1]
    print(comment_data)

    comment_images = []
    for i in range(1, int(comment_data['photo_counter']) + 1):
        comment_images.append(comment_data[f'comment_photo_{i}'])
    print(comment_images)

    comment_task = create_comment_task.delay(comment_images, comment_data['agent'], telegram_id, order_id,
                                             comment_data['rating'], comment_data['comment_text'])
    print('TASK CREATES - create comment ', comment_task.task_id)


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()

    chat = message.chat
    chat_id = chat.id

    from_user = message.from_user
    telegram_id = from_user.id
    telegram_username = from_user.username
    telegram_name = from_user.first_name
    telegram_surname = from_user.last_name

    hello = f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É –ø–æ–∏—Å–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞!'
    if not telegram_username:
        if telegram_name:
            hello = f'<b>{telegram_name}</b>, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è!'
        elif not telegram_name and telegram_surname:
            hello = f'<b>{telegram_surname}</b>, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è!'
    else:
        hello = f'<b>{telegram_username}</b>, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è!'

    await save_client(telegram_chat_id=chat_id, telegram_id=telegram_id, telegram_name=telegram_name,
                      telegram_surname=telegram_surname, telegram_username=telegram_username)

    keyboard = await start_menu_buttons(telegram_id)

    await message.answer(f'{hello}\n\n'
                         '–£ —Ç–µ–±—è —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å? –¢–µ–±–µ –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å —Ä–µ–º–æ–Ω—Ç? –ò—â–µ—à—å –º–∞—Å—Ç–µ—Ä–∞? \n\n'
                         '<b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b> üíº - –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–≤–æ–µ–º –æ–±—ä–µ–∫—Ç–µ.\n'
                         '<b>–í–∏—Ç—Ä–∏–Ω–∞ —É—Å–ª—É–≥ </b> üìú - –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å —Ä–µ–º–æ–Ω—Ç –∫–≤–∞—Ä—Ç–∏—Ä—ã, —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∏, '
                         '–Ω–∞–π—Ç–∏ –º–∞—Å—Ç–µ—Ä–∞ –ø–æ –º–∞–Ω–∏–∫—é—Ä—É, –±—Ä–æ–≤—è–º.\n'
                         '<b>–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ </b> üìû - –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Å—Ç–∞—Ç—å –∞–≥–µ–Ω—Ç–æ–º, —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å —Å –Ω–∞–º–∏ –∏–ª–∏ –Ω–∞—à–µ–ª '
                         '–±–∞–≥–∏ —Ç–∞–º —Ç—ã –Ω–∞–π–¥–µ—à—å –Ω–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã\n'
                         '<b>–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ </b> üí¨ - –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ–± –∞–≥–µ–Ω—Ç–µ',
                         reply_markup=keyboard,
                         parse_mode='HTML')


@router.message(Text('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
async def head_menu(message: Message, state: FSMContext):
    from_user = message.from_user
    telegram_id = from_user.id
    keyboard = await start_menu_buttons(telegram_id)

    await state.clear()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ',
                         reply_markup=keyboard,
                         parse_mode='HTML')


@router.message(Text("–í–∏—Ç—Ä–∏–Ω–∞ —É—Å–ª—É–≥ üìúÔ∏è"))
async def showcase(message: Message):
    chat = message.chat
    telegram_chat_id = chat.id

    from_user = message.from_user
    client_id = from_user.id

    # –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã –∑–∞–∫–∞–∑–∞ —Å–º–µ—Ç—á–∏–∫–∞
    # await create_product_order('8802553535', telegram_chat_id, client_id, 'maikl.kurpatov@yandex.ru',
    #                            'address', 'addition_information',
    #                            '5721238199', 0, '–ó–∞–∫–∞–∑–∞—Ç—å —Å–º–µ—Ç—á–∏–∫–∞',
    #                            '–ü–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ —Ç–µ—Å—Ç', '50000', '2023-07-07', '–ü–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ —Å–º–µ—Ç—á–∏–∫–∞')

    webapp_data = message.web_app_data

    if not webapp_data:
        webApp_flat_repair = WebAppInfo(
            url=f'https://{CREW_URL}/PocketServiceApp/showcase/?TelegramId={client_id}&ShowcaseType=0')
        button_0 = KeyboardButton(text='–†–µ–º–æ–Ω—Ç –∫–≤–∞—Ä—Ç–∏—Ä—ã', web_app=webApp_flat_repair)

        webApp_technique_repair = WebAppInfo(
            url=f'https://{CREW_URL}/PocketServiceApp/showcase/?TelegramId={client_id}&ShowcaseType=1')
        button_1 = KeyboardButton(text='–†–µ–º–æ–Ω—Ç —Ç–µ—Ö–Ω–∏–∫–∏', web_app=webApp_technique_repair)

        webApp_furniture_repair = WebAppInfo(
            url=f'https://{CREW_URL}/PocketServiceApp/showcase/?TelegramId={client_id}&ShowcaseType=2')
        button_2 = KeyboardButton(text='–†–µ–º–æ–Ω—Ç –º–µ–±–µ–ª–∏', web_app=webApp_furniture_repair)

        webApp_beauty_services = WebAppInfo(
            url=f'https://{CREW_URL}/PocketServiceApp/showcase/?TelegramId={client_id}&ShowcaseType=3')
        button_3 = KeyboardButton(text='–£—Å–ª—É–≥–∏ –∫—Ä–∞—Å–æ—Ç—ã', web_app=webApp_beauty_services)

        button_back = KeyboardButton(text='üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

        buttons = [
            [
                button_0,
                button_1,
            ],
            [
                button_2,
                button_3,
            ],
            [
                button_back,
            ],
        ]

        keyboard_showcase = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

        await message.answer(f'–í—ã–±–µ—Ä–∏:\n\n'
                             f'<b>–†–µ–º–æ–Ω—Ç –∫–≤–∞—Ä—Ç–∏—Ä—ã</b> - –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å –±—Ä–∏–≥–∞–¥—É –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã\n'
                             f'<b>–†–µ–º–æ–Ω—Ç —Ç–µ—Ö–Ω–∏–∫–∏</b> - –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á–µ–≥–æ –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞ —Ç–µ—Ö–Ω–∏–∫–∏\n'
                             f'<b>–†–µ–º–æ–Ω—Ç –º–µ–±–µ–ª–∏</b> - –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á–µ–≥–æ –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞ –º–µ–±–µ–ª–∏.\n'
                             f'<b>–£—Å–ª—É–≥–∏ –∫—Ä–∞—Å–æ—Ç—ã</b> - –ø–æ–∏—Å–∫ –º–∞—Å—Ç–µ—Ä–æ–≤ –º–∞–Ω–∏–∫—é—Ä–∞, –ø–µ–¥–∏–∫—é—Ä–∞, –±—Ä–æ–≤–µ–π –∏ —Ç.–¥.\n'
                             f'',
                             reply_markup=keyboard_showcase,
                             parse_mode='HTML')


@router.message(Text('–í—ã—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏ —É—Å–ª—É–≥–∏ üìû'))
async def contact_menu(message: Message):
    from_user = message.from_user
    telegram_id = from_user.id
    keyboard = await start_menu_buttons(telegram_id)

    await message.answer(f'–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n\n'
                         f'agent@web.pocket-service.ru - –ø–∏—à–∏, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Å—Ç–∞—Ç—å –Ω–æ–≤—ã–º –∞–≥–µ–Ω—Ç–æ–º, –≤ –∑–∞—è–≤–∫–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ '
                         f'–Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–º @telegram_username –∏–ª–∏ id, –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é '
                         f'–æ —Å–µ–±–µ, –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ (–µ—Å–ª–∏ –≤—ã —É–ø—Ä–∞–≤–ª—è—é—â–∏–π - —É–∫–∞–∂–∏—Ç–µ —ç—Ç–æ). –ü—Ä–∏ '
                         f'—ç—Ç–æ–º –µ—Å–ª–∏ –≤—ã –Ω–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Ö–æ—á–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∞–º–∏ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ '
                         f'–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π (–ò–ù–ù, –û–ì–†–ù–ò–ü, —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å). –ü—Ä–∏–ª–æ–∂–∏—Ç–µ –≤—Å–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä—è—é—â–∏–µ –ª–∏—á–Ω–æ—Å—Ç—å '
                         f'–∏ –∫–æ–º–ø–∞–Ω–∏—é –¥–æ–∫—É–º–µ–Ω—Ç—ã, –ø—Ä–∏–º–µ—Ä—ã –≤–∞—à–∏—Ö —Ä–∞–±–æ—Ç (–ø—Ä–æ—Ñ–∏–ª—å –≤ –ø—Ä–æ—Ñ–∏.—Ä—É), –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–∞—Ö, '
                         f'–æ—Ç–∑—ã–≤—ã –∏ –≤—Å–µ, —á—Ç–æ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º, —á—Ç–æ–± –±—ã–ª–æ –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ. \n\n'
                         f'company@web.pocket-service.ru - –ø–∏—à–∏—Ç–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à—É –∫–æ–º–ø–∞–Ω–∏—é —É –Ω–∞—Å '
                         f'–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å, –ø—Ä–∏–ª–æ–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–Ω—ã–µ –≤—ã—à–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n\n'
                         f'bug@web.pocket-service.ru - –ø–∏—à–∏—Ç–µ, –∑–∞–º–µ—Ç–∏—Ç–µ –æ—à–∏–±–∫–∏ –∏ –±–∞–≥–∏ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞.\n\n'
                         f'–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≤—è–∂–µ–º—Å—è —Å  –≤–∞–º–∏! –í–∞—à, Pocket Service.',
                         reply_markup=keyboard,
                         parse_mode='HTML')


@router.message(Text('–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üí¨'))
async def comment_menu(message: Message, state: FSMContext):
    from_user = message.from_user
    telegram_id = from_user.id

    agents_tg_list = await agents_list_from_orders_client(telegram_id)
    keyboard = await comment_menu_agents_buttons(agents_tg_list)

    await message.answer(f'–ö–∞–∫–æ–º—É –∞–≥–µ–Ω—Ç—É –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?', reply_markup=keyboard,
                         parse_mode='HTML')
    await state.set_state(CommentState.choosing_agent)


@sync_to_async
def agent_finder(message):
    agent_info = message.split('@')
    if isinstance(agent_info, list):
        return Agent.objects.filter(telegram_username=agent_info[1][:-1]).last().id
    else:
        return Agent.objects.filter(person_fio=agent_info).last().id


@router.message(CommentState.choosing_agent, F.text.in_(agents_list))
async def agent_chosen(message: Message, state: FSMContext):
    from_user = message.from_user
    telegram_id = from_user.id

    agent = await agent_finder(message.text)
    await state.update_data(agent=agent)
    await state.update_data(photo_counter=0)

    keyboard = await comment_menu_orders_buttons(agent, telegram_id)

    await message.answer(
        text="–¢–µ–ø–µ—Ä—å, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å",
        reply_markup=keyboard
    )
    await state.set_state(CommentState.choosing_order)


@router.message(CommentState.choosing_agent)
async def agent_chosen_incorrectly(message: Message):
    await message.answer(
        text="–¢–∞–∫–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n\n"
             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
    )


@router.message(CommentState.choosing_order)
async def order_chosen(message: Message, state: FSMContext):
    await state.update_data(order=message.text)

    buttons = [
        [
            KeyboardButton(text=rating_list[0]),
            KeyboardButton(text=rating_list[1]),
        ],
        [
            KeyboardButton(text=rating_list[2]),
            KeyboardButton(text=rating_list[3]),
        ],
        [
            KeyboardButton(text=rating_list[4]),
        ],
        [
            KeyboardButton(text='üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        ],
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É",
        reply_markup=keyboard
    )
    await state.set_state(CommentState.choosing_rating)


@router.message(CommentState.choosing_rating, F.text.in_(rating_list))
async def rating_chosen(message: Message, state: FSMContext):
    await state.update_data(rating=message.text.split(' ')[0])

    buttons = [
        [
            KeyboardButton(text='–°–æ–≤—Å–µ–º –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å'),
            KeyboardButton(text='–ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å'),
        ],
        [
            KeyboardButton(text='–ü–æ–π–¥–µ—Ç'),
            KeyboardButton(text='–ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å'),
        ],
        [
            KeyboardButton(text='–í—Å–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å'),
        ],
        [
            KeyboardButton(text='üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        ]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

    await message.answer(
        text="–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É, –ª–∏–±–æ –≤—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é.",
        reply_markup=keyboard
    )
    await state.set_state(CommentState.choosing_comment_text)


@router.message(CommentState.choosing_rating)
async def rating_chosen_incorrectly(message: Message):
    buttons = [
        [
            KeyboardButton(text=rating_list[0]),
            KeyboardButton(text=rating_list[1]),
        ],
        [
            KeyboardButton(text=rating_list[2]),
            KeyboardButton(text=rating_list[3]),
        ],
        [
            KeyboardButton(text=rating_list[4]),
        ],
        [
            KeyboardButton(text='üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        ],
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

    await message.answer(
        text="–¢–∞–∫–æ–π –æ—Ü–µ–Ω–∫–∏ –Ω–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )


@router.message(CommentState.choosing_comment_text)
async def comment_chosen(message: Message, state: FSMContext):
    await state.update_data(comment_text=message.text)

    buttons = [
        [
            KeyboardButton(text='–ù–µ—Ç'),
            KeyboardButton(text='–í—Å–µ'),
        ],
        [
            KeyboardButton(text='üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        ],
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

    await message.answer(
        text="–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–ª–æ–∂–∏—Ç–µ–µ —Ñ–æ—Ç–æ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é (–µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç - –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ù–µ—Ç¬ª). \n"
             "–ú–æ–∂–Ω–æ —Å–∫–∏–¥—ã–≤–∞—Ç—å —Ñ–æ—Ç–æ –ø–æ –æ–¥–Ω–æ–º—É, –º–æ–∂–Ω–æ –≤—Å–µ —Å—Ä–∞–∑—É, –µ—Å–ª–∏ —Ñ–æ—Ç–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å - –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–í—Å–µ¬ª",
        reply_markup=keyboard
    )
    await state.set_state(CommentState.choosing_photo)


@router.message(CommentState.choosing_photo)
async def photos_chosen(message: Message, state: FSMContext, bot: Bot):
    from_user = message.from_user
    telegram_id = from_user.id

    if message.content_type == 'photo':
        photo = message.photo[-1]
        time.sleep(1)
        photo_file = await bot.get_file(photo.file_id)
        photo_path = photo_file.file_path
        destination = f"/postgres_data/objects/comments/images/{photo.file_unique_id}.jpg"
        await bot.download_file(photo_path, f'./media{destination}')

        user_data = await state.get_data()
        photo_counter = user_data['photo_counter'] + 1

        await state.update_data({
            f'comment_photo_{photo_counter}': destination,
            'photo_counter': photo_counter,
        })
    else:
        keyboard = await start_menu_buttons(telegram_id)

        user_data = await state.get_data()
        await create_comment(user_data, telegram_id)

        await message.answer(
            text="–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π!",
            reply_markup=keyboard
        )
        await state.clear()


async def shutdown(dispatcher: Dispatcher):
    await dispatcher.storage.close()
    await dispatcher.storage.wait_closed()


async def main():
    bot = Bot(token=TOKEN, parse_mode="HTML")

    dp = Dispatcher(storage=storage)
    dp.include_router(router)

    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
