# Generated by Django 4.1.7 on 2023-08-03 10:49

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('update_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Время обновления')),
                ('flag', models.BooleanField(default=1, verbose_name='Флаг активности')),
                ('area_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Название района')),
                ('city', models.CharField(blank=True, max_length=255, null=True, verbose_name='Город')),
                ('region', models.CharField(blank=True, max_length=255, null=True, verbose_name='Область')),
            ],
            options={
                'db_table': 'area',
            },
        ),
        migrations.CreateModel(
            name='Contract',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('update_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Время обновления')),
                ('flag', models.BooleanField(default=1, verbose_name='Флаг активности')),
                ('name', models.CharField(blank=True, max_length=20, null=True, verbose_name='Название контракта')),
                ('contract_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='Номер договора')),
                ('start_date', models.DateTimeField(blank=True, null=True, verbose_name='Дата начала работ')),
                ('end_date', models.DateTimeField(blank=True, null=True, verbose_name='Дата конца работ')),
            ],
            options={
                'db_table': 'сontract',
            },
        ),
        migrations.CreateModel(
            name='FileObject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('update_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Время обновления')),
                ('flag', models.BooleanField(default=1, verbose_name='Флаг активности')),
                ('object_type', models.CharField(max_length=100, verbose_name='Тип объекта')),
                ('file_object', models.FileField(blank=True, null=True, upload_to='./postgres_data/objects/persons/files/', verbose_name='Объект файла')),
            ],
            options={
                'db_table': 'file_object',
            },
        ),
        migrations.CreateModel(
            name='ImageObject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('update_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Время обновления')),
                ('flag', models.BooleanField(default=1, verbose_name='Флаг активности')),
                ('image_object', models.ImageField(blank=True, null=True, upload_to='./postgres_data/objects/persons/images/', verbose_name='Объект картинки')),
            ],
            options={
                'db_table': 'image_object',
            },
        ),
        migrations.CreateModel(
            name='OnlineTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('update_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Время обновления')),
                ('flag', models.BooleanField(default=1, verbose_name='Флаг активности')),
                ('currency', models.CharField(blank=True, max_length=255, null=True, verbose_name='Валюта')),
                ('total_amount', models.CharField(blank=True, max_length=255, null=True, verbose_name='Итоговая сумма')),
                ('invoice_payload', models.CharField(blank=True, max_length=255, null=True, verbose_name='Invoice payload')),
                ('provider_payment_charge_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='Provider Payment Charge ID')),
                ('status', models.BooleanField(default=False, verbose_name='Status')),
                ('status_str', models.CharField(blank=True, max_length=255, null=True, verbose_name='Status Str')),
                ('operation', models.CharField(blank=True, max_length=255, null=True, verbose_name='Operation')),
                ('masked_pan', models.CharField(blank=True, max_length=255, null=True, verbose_name='Masked Pan')),
                ('bank_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Bank Name')),
                ('payment_way', models.CharField(blank=True, max_length=255, null=True, verbose_name='Payment Way')),
                ('expiry', models.CharField(blank=True, max_length=255, null=True, verbose_name='Expiry')),
                ('payment_date', models.DateTimeField(blank=True, null=True, verbose_name='Payment Time')),
            ],
            options={
                'verbose_name': 'Transaction',
                'verbose_name_plural': 'Transactions',
                'db_table': 'Transactions',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('update_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Время обновления')),
                ('flag', models.BooleanField(default=1, verbose_name='Флаг активности')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Имя')),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Цена')),
                ('deadline', models.DateTimeField(blank=True, null=True, verbose_name='Срок конца работы')),
                ('addition_information', models.TextField(blank=True, null=True, verbose_name='Дополнительная информация')),
                ('reminder_status', models.BooleanField(default=0, verbose_name='Статус напоминания')),
                ('control_flag', models.BooleanField(default=0, verbose_name='Флаг новизны')),
            ],
            options={
                'db_table': 'order',
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('update_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Время обновления')),
                ('flag', models.BooleanField(default=1, verbose_name='Флаг активности')),
                ('name', models.CharField(blank=True, max_length=20, null=True, verbose_name='Имя')),
                ('surname', models.CharField(blank=True, max_length=20, null=True, verbose_name='Фамилия')),
                ('patronymic', models.CharField(blank=True, max_length=20, null=True, verbose_name='Отчество')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Дата рождения')),
                ('phone_number', models.CharField(blank=True, max_length=12, null=True, verbose_name='Номер телефона')),
                ('telegram_chat_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='ID Чата')),
                ('username', models.CharField(blank=True, max_length=20, null=True, verbose_name='Имя пользователя')),
                ('telegram_id', models.CharField(blank=True, max_length=20, null=True, verbose_name='ID Телеграмм')),
                ('telegram_username', models.CharField(blank=True, max_length=20, null=True, verbose_name='Пользователь Телеграмм')),
                ('telegram_name', models.CharField(blank=True, max_length=20, null=True, verbose_name='Имя пользователя Телеграмм')),
                ('telegram_surname', models.CharField(blank=True, max_length=20, null=True, verbose_name='Фамилия пользователя Телеграмм')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Электронная почта')),
                ('background_image', models.ImageField(blank=True, null=True, upload_to='./postgres_data/objects/persons/background/', verbose_name='Аватар пользователя ')),
            ],
            options={
                'db_table': 'person',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('update_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Время обновления')),
                ('flag', models.BooleanField(default=1, verbose_name='Флаг активности')),
                ('product_type', models.PositiveSmallIntegerField(blank=True, choices=[(0, 'Ремонт квартиры'), (1, 'Ремонт сантехники'), (2, 'Ремонт мебели'), (3, 'Уборка')], null=True, verbose_name='Тип услуги')),
                ('addition_information', models.TextField(blank=True, null=True, verbose_name='Дополнительная информация')),
                ('product_image', models.ImageField(blank=True, null=True, upload_to='./postgres_data/objects/products/images/', verbose_name='Картинка услуг')),
            ],
            options={
                'db_table': 'product',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('update_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Время обновления')),
                ('flag', models.BooleanField(default=1, verbose_name='Флаг активности')),
                ('role_type', models.CharField(blank=True, max_length=50, null=True, verbose_name='Роль')),
            ],
            options={
                'db_table': 'role',
            },
        ),
        migrations.CreateModel(
            name='Administrator',
            fields=[
                ('person_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='PocketServiceApp.person')),
                ('whom_created', models.CharField(blank=True, max_length=20, null=True, verbose_name='Создатель')),
                ('addition_information', models.TextField(blank=True, null=True, verbose_name='Дополнительная информация')),
            ],
            options={
                'db_table': 'administrator',
            },
            bases=('PocketServiceApp.person',),
        ),
        migrations.CreateModel(
            name='Agent',
            fields=[
                ('person_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='PocketServiceApp.person')),
                ('agent_description', models.TextField(blank=True, null=True, verbose_name='Описание агента')),
                ('education_description', models.TextField(blank=True, null=True, verbose_name='Образование')),
                ('work_experience', models.TextField(blank=True, null=True, verbose_name='Опыт работы')),
                ('command_work', models.BooleanField(blank=True, null=True, verbose_name='Работа в команде')),
                ('passport_check', models.BooleanField(blank=True, null=True, verbose_name='Проверка паспорта')),
                ('contract_work', models.BooleanField(blank=True, null=True, verbose_name='Работа по договору')),
                ('guarantee_period', models.TextField(blank=True, null=True, verbose_name='Гарантийный период')),
                ('services_prices', models.TextField(blank=True, null=True, verbose_name='Услуги и цены')),
            ],
            options={
                'db_table': 'agent',
            },
            bases=('PocketServiceApp.person',),
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('person_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='PocketServiceApp.person')),
                ('address', models.CharField(blank=True, max_length=255, null=True, verbose_name='Адрес проживания')),
                ('addition_information', models.TextField(blank=True, null=True, verbose_name='Дополнительная информация')),
                ('object_information', models.TextField(blank=True, null=True, verbose_name='Информация об объекте проживания')),
            ],
            options={
                'db_table': 'client',
            },
            bases=('PocketServiceApp.person',),
        ),
        migrations.CreateModel(
            name='Smeta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('update_datetime', models.DateTimeField(auto_now_add=True, verbose_name='Время обновления')),
                ('flag', models.BooleanField(default=1, verbose_name='Флаг активности')),
                ('name', models.CharField(blank=True, max_length=20, null=True, verbose_name='Название сметы')),
                ('smeta_type', models.PositiveSmallIntegerField(blank=True, choices=[(0, 'Смета на работы'), (1, 'Смета на материалы')], null=True, verbose_name='Тип сметы')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание сметы')),
                ('name_work', models.CharField(blank=True, max_length=20, null=True, verbose_name='Наименование работ/материалов')),
                ('quantity', models.CharField(blank=True, max_length=20, null=True, verbose_name='Количество')),
                ('unit', models.CharField(blank=True, max_length=10, null=True, verbose_name='Единица измерения')),
                ('cost', models.IntegerField(blank=True, null=True, verbose_name='Цена')),
                ('price', models.IntegerField(blank=True, null=True, verbose_name='Стоимость')),
                ('contract', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='smeta_contract', to='PocketServiceApp.contract', verbose_name='Смета контракта')),
            ],
            options={
                'db_table': 'smeta',
            },
        ),
        migrations.AddIndex(
            model_name='role',
            index=models.Index(fields=['creation_datetime'], name='index_role_time'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['product_type'], name='index_name_product'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['creation_datetime'], name='index_product_time'),
        ),
        migrations.AddField(
            model_name='person',
            name='role',
            field=models.ManyToManyField(blank=True, related_name='roles', to='PocketServiceApp.role', verbose_name='Роли'),
        ),
        migrations.AddField(
            model_name='order',
            name='product',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='product_orders', to='PocketServiceApp.product', verbose_name='Продукт'),
        ),
        migrations.AddField(
            model_name='onlinetransaction',
            name='order',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='order', to='PocketServiceApp.order', verbose_name='Заказ'),
        ),
        migrations.AddField(
            model_name='imageobject',
            name='contract',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='contract_image', to='PocketServiceApp.contract', verbose_name='Картинки для контракта'),
        ),
        migrations.AddField(
            model_name='imageobject',
            name='person',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='person_image', to='PocketServiceApp.person', verbose_name='Картинки пользователя'),
        ),
        migrations.AddField(
            model_name='imageobject',
            name='smeta',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='smeta_image', to='PocketServiceApp.smeta', verbose_name='Картинки для сметы'),
        ),
        migrations.AddField(
            model_name='fileobject',
            name='contract',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='contract_file', to='PocketServiceApp.contract', verbose_name='Файлы для контракта'),
        ),
        migrations.AddField(
            model_name='fileobject',
            name='person',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='person_files', to='PocketServiceApp.person', verbose_name='Файлы пользователя'),
        ),
        migrations.AddField(
            model_name='fileobject',
            name='smeta',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='smeta_file', to='PocketServiceApp.smeta', verbose_name='Файлы для сметы'),
        ),
        migrations.AddField(
            model_name='contract',
            name='order',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='contact_order', to='PocketServiceApp.order', verbose_name='Заявка'),
        ),
        migrations.AddIndex(
            model_name='area',
            index=models.Index(fields=['area_name'], name='index_area_name'),
        ),
        migrations.AddIndex(
            model_name='area',
            index=models.Index(fields=['creation_datetime'], name='index_area_time'),
        ),
        migrations.AddIndex(
            model_name='smeta',
            index=models.Index(fields=['creation_datetime'], name='index_smeta_time'),
        ),
        migrations.AddIndex(
            model_name='person',
            index=models.Index(fields=['phone_number'], name='index_persons_phone_number'),
        ),
        migrations.AddIndex(
            model_name='person',
            index=models.Index(fields=['telegram_id'], name='index_persons_telegram_id'),
        ),
        migrations.AddIndex(
            model_name='person',
            index=models.Index(fields=['email'], name='index_persons_email'),
        ),
        migrations.AddIndex(
            model_name='person',
            index=models.Index(fields=['creation_datetime'], name='index_person_time'),
        ),
        migrations.AddField(
            model_name='order',
            name='administrator',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='product_orders', to='PocketServiceApp.administrator', verbose_name='Администратор'),
        ),
        migrations.AddField(
            model_name='order',
            name='agent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='agent_orders', to='PocketServiceApp.agent', verbose_name='Агент'),
        ),
        migrations.AddField(
            model_name='order',
            name='client',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='client_orders', to='PocketServiceApp.client', verbose_name='Клиент'),
        ),
        migrations.AddIndex(
            model_name='onlinetransaction',
            index=models.Index(fields=['creation_datetime'], name='index_onlinetransaction_time'),
        ),
        migrations.AddIndex(
            model_name='imageobject',
            index=models.Index(fields=['creation_datetime'], name='index_imageobject_time'),
        ),
        migrations.AddIndex(
            model_name='fileobject',
            index=models.Index(fields=['creation_datetime'], name='index_fileobject_time'),
        ),
        migrations.AddIndex(
            model_name='contract',
            index=models.Index(fields=['contract_number'], name='index_number_contract'),
        ),
        migrations.AddIndex(
            model_name='contract',
            index=models.Index(fields=['creation_datetime'], name='index_contract_time'),
        ),
        migrations.AddField(
            model_name='agent',
            name='area',
            field=models.ManyToManyField(blank=True, related_name='area_agents', to='PocketServiceApp.area', verbose_name='Районы'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['name'], name='index_name_order'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['creation_datetime'], name='index_order_time'),
        ),
    ]
