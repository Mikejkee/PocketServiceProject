import asyncio
from asgiref.sync import sync_to_async
import logging
from aiogram import F, Bot, Dispatcher, types
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram.filters import Text
from aiogram.filters.command import Command

from hr_system.telegram_tasks import save_client_task, create_product_order_task, tg_message_task, \
    update_product_order_task

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ TODO: –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª env-—ã
TOKEN = "6138821594:AAEatK-fHgdQoHqNT-tSBX-DMk2T-MCRB14"

# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()


@sync_to_async
def save_client(name=None, surname=None, patronymic=None,
                date_of_birth=None, phone_number=None, username=None, telegram_chat_id=None,
                telegram_id=None, telegram_username=None, telegram_name=None,
                telegram_surname=None, email=None, background_image=None, address=None,
                addition_information=None, object_information=None):
    task = save_client_task.delay(name, surname, patronymic, date_of_birth, phone_number, username,
                                  telegram_chat_id, telegram_id, telegram_username, telegram_name,
                                  telegram_surname, email, background_image, address,
                                  addition_information, object_information)
    print('TASK CREATES - SAVE CLIENT ', task.task_id)


def tg_reminder(telegram_id, message, time=0):
    task = tg_message_task.apply_async(kwargs={'telegram_id': telegram_id, 'message': message, 'token': TOKEN},
                                       countdown=time)
    print('TASK CREATES - tg reminder ', task.task_id)
    return task.task_id


@sync_to_async
def create_product_order(phone_number, telegram_chat_id, client_id, email,
                         address, addition_information, object_information,
                         agent_id, product_type, product_addition_information,
                         order_name, order_price,
                         order_deadline, order_information):
    order_task = create_product_order_task.delay(phone_number, telegram_chat_id, client_id, email,
                                                 address, addition_information, object_information,
                                                 agent_id, product_type, product_addition_information,
                                                 order_name, order_price, order_deadline, order_information)
    print('TASK CREATES - create order ', order_task.task_id)

    client_remind_task = tg_reminder(client_id, "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ {} . \n"
                                                "–û–∂–∏–¥–∞–π—Ç–µ, –∫–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å".format(product_addition_information))
    print('TASK CREATES - client remind ', client_remind_task)

    agent_remind_task = tg_reminder(agent_id, "–í–∞–º –ø—Ä–∏—à–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ {}, \n "
                                              "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º. \n"
                                              "–¢–µ–ª–µ—Ñ–æ–Ω: {} , email: {}".format(product_addition_information,
                                                                                phone_number, email))
    print('TASK CREATES - agent remind ', agent_remind_task)

    agent_remind_task = tg_reminder(agent_id, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–µ–º, —á—Ç–æ –≤–∞–º –ø—Ä–∏—à–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ {}, \n "
                                              "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º –∏ –æ—Ç–º–µ—Ç—å—Ç–µ  –≤ –ª–∏—á–Ω–æ–º "
                                              "–∫–∞–±–∏–Ω–µ—Ç–µ –∏—Ñ–Ω–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞. \n"
                                              "–¢–µ–ª–µ—Ñ–æ–Ω: {} , email: {}".format(product_addition_information,
                                                                                phone_number, email),
                                    10)
    print('TASK CREATES - agent remind 3h ', agent_remind_task)

    update_order_task = update_product_order_task.delay(order_id=order_task.get(), reminder_status=1)
    print('TASK CREATES - update order', update_order_task.task_id)


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    chat = message.chat
    chat_id = chat.id

    from_user = message.from_user
    telegram_id = from_user.id
    telegram_username = from_user.username
    telegram_name = from_user.first_name
    telegram_surname = from_user.last_name

    hello = f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É –ø–æ–∏—Å–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞!'
    if not telegram_username:
        if telegram_name:
            hello = f'<b>{telegram_name}</b>, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è!'
        elif not telegram_name and telegram_surname:
            hello = f'<b>{telegram_surname}</b>, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è!'
    else:
        hello = f'<b>{telegram_username}</b>, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è!'

    hcs_user = await save_client(telegram_chat_id=chat_id, telegram_id=telegram_id,
                                 telegram_name=telegram_name, telegram_surname=telegram_surname,
                                 telegram_username=telegram_username)

    buttons = [
        KeyboardButton(text='–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üíº'),
        KeyboardButton(text='–†–µ–º–æ–Ω—Ç –∫–≤–∞—Ä—Ç–∏—Ä üõ†Ô∏è'),
    ]

    keyboard_start = ReplyKeyboardMarkup(
        keyboard=[buttons, ],
        resize_keyboard=True
    )
    await message.answer(f'{hello}\n\n'
                         '–£ —Ç–µ–±—è —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å? –¢–µ–±–µ –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å —Ä–µ–º–æ–Ω—Ç? \n\n'
                         '<b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b> üíº - –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–≤–æ–µ–º –æ–±—ä–µ–∫—Ç–µ.\n'
                         '<b>–†–µ–º–æ–Ω—Ç –∫–≤–∞—Ä—Ç–∏—Ä </b> üõ† - –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å —Ä–µ–º–æ–Ω—Ç –∫–≤–∞—Ä—Ç–∏—Ä—ã.\n'
                         '',
                         reply_markup=keyboard_start,
                         parse_mode='HTML')


@dp.message(Text('–†–µ–º–æ–Ω—Ç –∫–≤–∞—Ä—Ç–∏—Ä üõ†Ô∏è'))
async def flat_repair(message: types.Message):
    buttons = [
        [
            KeyboardButton(text="–í–∏—Ç—Ä–∏–Ω–∞ —É—Å–ª—É–≥ üõí"),
            KeyboardButton(text="–ì–∞–ª–µ—Ä–µ—è —Ä–∞–±–æ—Ç üì∏"),
            KeyboardButton(text="–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å üí≤"),
        ],
    ]

    keyboard_flat_repair = ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True,
    )
    await message.answer(f'–í—ã–±–µ—Ä–∏:\n\n'
                         f'<b>–í–∏—Ç—Ä–∏–Ω—É —É—Å–ª—É–≥</b> üõí - –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å –±—Ä–∏–≥–∞–¥—É\n'
                         f'<b>–ì–∞–ª–µ—Ä–µ—é —Ä–∞–±–æ—Ç</b> üì∏ - –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç\n'
                         f'<b>–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å</b> üí≤ - –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–º–µ—Ä–æ–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–µ–º–æ–Ω—Ç–∞.\n'
                         '',
                         reply_markup=keyboard_flat_repair,
                         parse_mode='HTML')


@dp.message(Text("–í–∏—Ç—Ä–∏–Ω–∞ —É—Å–ª—É–≥ üõí"))
async def test_smeta(message: types.Message):
    chat = message.chat
    telegram_chat_id = chat.id

    from_user = message.from_user
    client_id = from_user.id

    await create_product_order('8802553535', telegram_chat_id, client_id, 'maikl.kurpatov@yandex.ru',
                               'address', 'addition_information', 'object_information',
                               '5721238199', 0, '–ó–∞–∫–∞–∑–∞—Ç—å —Å–º–µ—Ç—á–∏–∫–∞',
                               '–ü–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ —Ç–µ—Å—Ç', '50000', '2023-07-07', '–ü–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ —Å–º–µ—Ç—á–∏–∫–∞')

    await message.reply("–°–º–µ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–∞–Ω")


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    bot = Bot(token=TOKEN, parse_mode="HTML")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
